
자바스크립트 기초

1. 실습방법 안내
  - 브라우저 : 자바스크립트 해석 엔진 탑재( V8 )
  - 웹브라우저 콘솔
    - 엔터키 : 실행
    - SHIFT+ 엔터 : 줄 개행
  - 인터프린터 언어
    - 한줄 한줄 실시간 해석
    - 컴파일 없이 바로 수정 내용 확인 가능
자바스크립트 기초 문법

  1. 자바스크립트 사용하는 방법
    - <script> 태그에 정의된 자바스크립트를 브라우저가 해석
      1) <script> 태그 안쪽에 자바스크립트 코드를 정의

        <script>
          // 자바스크립트 코드 ...
        </script>
      
      2) <script src="스크립트 파일 경로 / 외부 URL"></script>
        - 확장자 js
      
      3) HTML 태그의 이벤트 처리기 속성
        - document객체안에 다양한 이벤트 처리기 속성이 정의
          - onclick
          - onshange ...
  2. 자바스크립트 주석 처리
    - 브라우저가 해석 X -> 실행 X
    - 한줄 주석 -> // 한줄 설명
    - 여러줄 주석 -> /* 여러줄 설명 */
    - 실행 배제
    
  3. 변수
    1) 정의
      - 공간(메모리)의 이름

    2) 변수선언
      var 변수명;
      - 값에 따라서 자료형은 자동 결정 된다.
      - 문자 string
      - 숫자 number / 정수(long), 실수(double)
      - 논리형 boolean
      - 객체 object

    3) 선언자 종류
      var, let, const

    4) 선언 방법
      var 변수;
      변수 = 값; 최초로 값을 대입하는것
      var num = 10; // 선언과 동시에 초기화
      var num1 = 10, num2 = 20, num3 = 30 ...;

    5) 변수 선언 생략

    6) 변수 끌어울림과 변수 중복 선언

    7) 변수의 명명규칙
      - 변수명은 알파벳, 숫자, 특수문자($, _)
      - 숫자는 앞에 올수 없다.
      - 예약어 사용 불가 예) throw, if
      
      var 1st (X)
      var sum-all (X)
      var sum_all (O)
      var throw (X)

      변수명 관례)
        여러 단어로 구성된 변수명 첫 단어만 제외하고 단어의 첫글자를 대문자 : 카멜 표기법
        var numOfOrders
          num of orders

        var num_of_order : 스네이크 표기법
          NUM_OF_ORDERS

    8) 변수에 저장할 수 있는 자료형
      string : 문자 - '값' 또는 "값"
      number : 숫자 - 정수(long), 실수(double)
      boolean : 논리형 - true, false
      null : 값이 없음 상태
      undefined : 값을 설정하지 않음
      object : 객체

      참고)
        typeof 연산자 : 자료형을 체크하는 연산자

  4. 연산자
    1) 대입 연산자 ( = )
      - 오른쪽의 연산 결과를 왼쪽 변수에 저장
        예) var result = 10 + 20 * 3;
      - 연산의 우선순위가 가장 낮다.
    
    2) 산술 연산자
      (+, -, /, *, % - 나머지 연산자)
      *, /, % > +, - 연산순위

      + : 숫자 - 더하기
      + : 문자 - 문자열 결합
        문자 + 숫자 : 문자열 결합
        숫자 + 문자 : 문자열 결합
        논리값 + 숫자 : 문자열 결합

    3) 증가, 감소 연산자
      - 1씩 증가
        ++
        num++, ++num
        num = num + 1;

      - 1씩 감소
        --
        num--, --num
        num = num - 1;
    
    4) 부호 연산자
      (+, -)
      - : 부호 반전
        (음수 -> 양수, 양수 -> 음수)

    5) 복합대입연산자
      (산술 연산자 + 대입)

      num = num + 2; // num += 2
      num = num * 2; // num *= 2

    6) 비교 연산자 
      >, >=, <, <=
      ==, === : 같다
      !=, !== : 다르다

        - 동일성 비교 (===) : 자료형까지 동일한지 확인
          참고) 자바 == : 주소 비교
        - 동등성 비교 (==)  : 자료형을 빼고 확인
          참고) 자바 equals, hashCode

      - 연산의 결과가 논리값(true, false)

    7) 논리 연산자 
      AND 연산 : &&
        모두 참이어야 참인 연산
      OR 연산 : ||
        어느 하나라도 참이면 참인 연산
      NOT 연산 : !
        참 -> 거짓, 거짓 -> 참

      - 논리 연산자 < 비교 연산자
      - 단락 회로 평가
        - 이미 답이 정해진 경우 연산 X
        예) 
          var num = 10;
          var result = ++num >  11 && (num = num +20) > 20;

        false로 인식하는값
        0
        "" : 빈값
        null
        undefined

        true로 인식하는값
          false 인식하는 이외의 값

        || : 기본값을 정할때
        && : 간단한 조건식을 대체

    8) 삼항조건연산자
      항 : 연산에 사용되는 값
        - 값 1개 - 단항 연산
        - 값 2개 - 이항 연산

      연산자 : 연산에 사용되는 기호
        10 + 20 -> 항 10, 20  연산자 +

          조건식 ? 참일때 :  거짓일때
            1항     2항       3항
              예1) var result = num == 10 ? "10입니다." : "10이 아닙니다.";
          
          - 간단한 조건식을 대체
            참고) &&
              예2)
              var num = 10;
              var result = '10이 아닙니다.'

              result = num == 10 && "10입니다"
              result값 -> "10입니다"
              result = num == 11 && "10입니다"
              result값 -> false

  5. 제어문
    if(조건식 - 참 거짓을 판별하는 식){
      // 조건식이 참일때 실행되는 코드
    }else{
      // 조건식이 거짓일때 실행되는 코드
    }

    if(조건식1){
      // 조건식1이 참 실행
    }else if(조건식2){
      // 조건식1이 거짓, 조건식2 참
    }else if(조건식3){
      // 조건식1, 조건식2 - 거짓, 조건식3 - 참
    }else{
      // 모든 조건이 거짓 - 실행
    }


    조건식 : 비교연산자, 논리연산자가 주로 사용

  6. 선택문
    switch(키워드){
      case"값1":
        // 키워드가 == 값1 : 실행되는 코드를
        break;
      case"값2":
        // 키워드가 == 값2 : 실행되는 코드를
        break;
        ...
      default :
        모든값이 같지 않은 경우 실행되는 코드
    }

  7. 반복문
    1)
      while(조건식){
        // 조건이 참일때 반복 실행되는 코드
      }

        예)
        var total = 0; num = 1;
        while(num <= 100){ // 횟수 100번 반복
          total += num;
          num++;
        }

    2)
      do{
        // 조건이 참일때 반복 실행되는 코드
        // 조건이 거짓이더라도 한번은 실행된다.
      }while(조건식);
    
        예)
        var total = 0; num = 1;
        do{
          total += num;
          num++;
        }while(num <= 100);

    3)
      for (초기화식; 조건식; 증감식){
        // 조건식이 참일때 반복 실행되는 코드
      }

        예)
        var total = 0;
        for(var num = 1; num <= 100; num++){
          total += num;
        }

      횟수 : 순서( index )
        관례) 변수명 i
          -> 중첩 for 
            i 다음 알파벳 순서대로 정해진다
              j, k, l, m, n ...

        예)
          var total = 0;
          for (var i = 1; i <= 100; i++){
            total += i;
          }

      중청 반복문
        반복문 안에 반목문 while + while, while + for, for + while, for + for

        예) 구구단
        for (var i = 2; i <= 9; i++){
          console.log(i,"단========")
          for (var j = 1; j <= 9; j++){
            console.log(i, "x", j, "=", i*j)
          }
        }
      
      반복 중단 : break;
        예)
        var total = 0;
        for(var i = 1; i <= 100; i++){
          total += i;
          if(i == 50){
            break;
          }
        }

      반복 건너뛰기 : continue;
        예)
        var total = 0;
        for(var i = 1; i <= 100; i++){
          if (i % 2 == 0 ){ // 짝수
            continue; // 건너뛰기
          }
          total += i; // 홀수
        }

  ECMAScript 6 부터 추가된 데이터 타입
    2015 / 모던 자바스크립트
      - 통일성 / 인터넷익스플로러
        attachEvent : IE / 6, 7, 8, 9... - JQuery
        addEventListener
      
      - 업데이트 시점 : 매년 스펙 개정
        ES6+ / ESNext

        - 싱글쓰레드 모델
        - 비동기 방식 : Event Driven


  1. 심벌(symbol)
    - 생성할때마다 유일무의한 값 생성(중복X)

    1) 심벌의 생성
      Symbol()

      예)
      var sym1 = Symbol("ABC");
      var sym2 = Symbol("ABC");
      sym1 == sym2;
      => false

    2) 심벌과 문자열 연결하기
      Symbol.for("명칭");

      var sym1 = Symbol.for("ABC");
      var sym2 = Symbol.for("ABC");
      sym1 == sym2;
      => true
  
  2. 템플릿 리터럴
    - 문자열의 편의 기능
      예)
      var str = "안녕하세요.
      반갑습니다." -> 오류
    - 문자열을 입력하는데로 인식(줄 개행 가능)
    - `.....`
      예)
      var str = `안녕하세요.
      반갑습니다.`

    메터 문자
      \n : 줄개행
       예) var str = "안녕하세요.\n반갑습니다";
      \t : 탭키 1번
      \b : 백스페이스 키 1번

  3. 보간 표현식(placeholder)
    - 변수, 간단한 연산식, 메서드 호출
    - ${변수, 연산식, 메서드}
      예)
      var num1 = 10;
      var num2 = 20;
      var str1 = `${num1}+${num2}=${num1+num2}`;
      => '10+20=30'

      예2)
      const date = new Date();
      const strDate = `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;
