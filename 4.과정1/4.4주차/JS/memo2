객체

1. 객체 리터럴
  - 객체는 이름과 값을 한쌍을 묶은 데이터를 여러개 모은 것
  - 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.

  - 객체(Object) : 사물, 대상
    - 속성
    - 행위

    - 행위를 톨한 상호작용 - 협동

    협동, 역할, 책임
    
    객체 지향 프로그래밍 : 객체간의 상호작용을 설계 원칙

      회원
      상품
      주문

2. 객체 리터럴로 객체 생성하기
  {
    속성 : 값 - 문자, 숫자, 객체,
    속성 : 값,
    ...
  }

    예1)
    var obj = {};
    typeof obj;
    => 'object'

    예2)
    var person = {
      age : 40,
      name : "아이유"
    };
    console.log(person);

  변수명.속성명; // 마침표 연산자(.)

    예2-1)
    person.age;
    => 40
    person.name;
    => 아이유
  
  변수명['속성명']; // []연산자

    예2-2)
    person['age'];
    => 40

    person['name'];
    => 아이유

3. 프로퍼티 추가와 삭제
  이미 있응 속성 값에 대입(=) : 변경
  없는 속성에 값을 대입(=) : 추가
    예)
    있는거!
    pserson.name = "(수정)아이유";
    => (수정)아이유

    없는거!
    person.address = "(추가)주소!!"
    => {age: 40, name:"(수정)아이유" address:"(추가)주소!!"}

    삭제
    delete 변수명.속성명: // delete 변수명['속성명'];

4. in 연산자로 프로퍼티가 있는지 확인하기
  - 객체 안에 속성명이 존재 하는지 체크

  예) 'age' in person

  - for문과 함께 사용
    
      for(키 in 객체){

      }

      예)
        for(var key in person){// age, name
          // console.log(key); // 변수 형태의 속성명 -> [] 연산자만 가능
          console.log("key=", key, ",value=" ,person[key])
        };

5. 메서드
  - 객체 안에 정의된 함수 : 메서드
  - 변수명.메서드명(매개변수....);

    예)
      var person(스택=>) = { 
          //(=>힙)
          age : 40,
          name : "아이유",
          showInfo : function(){
            console.log("정보!!");
          }
      };

    person.showInfo();
    => 정보!!

6. 객체는 참조 타입
  - 힙 메모리
  - 스택메모리

  변수 : 객체에 접근할 수 있는 주소를 가지고 있다
    -> 참조 변수

      예) 
      var person(=>주소) = {
        age(=>객체) : 40,
        name : "아이유"
      };

      var person2 = person;

      person2.name = "(수정)아이유"

      console.log(person);
      => {age: 40, name: '(수정)아이유'}

함수
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은것

1. 함수 선언문으로 함수 정의하기

  function 함수명(매개변수, ...){
    // 실행될 코드

    return 반환값;
  }

2. 함수 호출
  함수명(...);

  예)
  function add(num1, num2){
    var result = num1 + num2;

    return result;
  }

  var result = add(10, 20);
  result;
  => 30


3. 함수의 실행흐름
4. 함수 선언문의 끌어올림
  - 호이스팅

    예)
    add(10, 20)
    function add(num1, num2){
      var result = num1 + num2;
      return result;
    }
    => 30

    ////////

    // add(10, 20) - 오류
    var add = function(num1, num2){
      return num1 + num2;
    }

    add(10, 20);
    =>30



5. 값으로서의 함수
6. 참조에 의한 호출과 값에 의한 호출

  함수 - 1급 객체 / 함수형 프로그래밍

    1) 함수가 값으로 사용 가능 - 함수 객체
      - 매개변수
      - 반환값 - 클로저

        예) 클로저
        function outer(num1){

          return function inner(num2){
            return num1 + num2;
          };
        }

        var inner1 = outer(10); // num1이 10 으로 고정된 새로운 함수

        console.log(inner1);

        inner1(20);
        => 30

        var inner2 = outer(20); // num1이 20 으로 고정된 새로운 함수
        // outer - 새로운 함수를 만드는 패토리 함수

        inner(20);
        => 40
       
    2) 생성자 : 함수 객체 -> 다른 객체 생성

      참고)
        - 함수  : 실행문 : 자바, C
              : 표현문 -> 번역 -> 실행 가능한 형태 변경

        예1)
        function add(=> 변수명처럼 사용)(num1, num2){
          var result = num1 + num2;

          return result;
        }
        add = 10;
        => 10
        add(10, 20);
        => 오류

        예2)
        var add2 = function(num1, num2){
          var result = num1 + num2;
          return result;
        }
        add2(10, 20);
        => 30

        예3)
        function outer(callback){
          callback();
        }

        function inner(){
          console.log("inner 호출!");
        }

        outer(inner);
        => inner 호출! // 변수명처럼 사용되기때문에 대입이 가능하다

        예4)
        function outer(callback){
          callback();
        }

        outer(function(){
          console.log("inner 호출);
        })

        => inner 호출

        MDN (참고 사이트)
        https://developer.mozilla.org/ko/

        예1)
        var fruits = ["apple","mango","orange"]

        fruits.forEach(function(fruit){
          console.log(fruit);
        })
        =>  apple
            mango
            orange

        예2)
        function outer(){
          function inner(){
            console.log("inner");
          }
          inner();
        }

        outer();
        => inner

      - 함수 객체 -> 번역 -> EC(Execution Context)객체 ->실행(스택)
        
        예)
        var num0 = 5; -> Global EC

        function  outer(){
          var num1 = 10; -> outer EC

          function inner(){
            // var num1 = 25;
            var num2 = 20; -> inner EC

            return num0 + num1 + num2;
          }
          var result = inner();
          console.log(result);
          console.dir(result);
        }

        outer();
        => 35

        //////////////

        window 객체
        
        Global EC(Execution Context)객체{
          // 여기서 inner 와 outer가 실행된다
          변수 레코드 객체 
            window.변수명 = 값;
            (window.num0 = 5;)
          외부 EC 변수 레코드 참조 : null

          this 바인딩 : window 객체
        }

        outer EC(Execution Context)객체{
          변수 레코드 객체{
            num1 : 10
          }
          외부 EC 변수 레코드 참조: Global EC변수 레코드
          
          this 바인딩 : 호출한 객체
        }
        
        inner EC(Execution Context)객체{
          변수 레코드 객체{
            num2 : 20
          }

          외부 EC 변수 레코드 참조: outer EC 변수 레코드

          this 바인딩 : 호출한 객체
        }

        /////////////

        function add(num1, num2){
          console.log(this)
          return num1 + num2;
        }
        => this -> window

        /////////////
        
        var person = {
          age : 40,
          name : "아이유",
          showInfo : function(){
            console.log(this);
            console.log(this.age, this.name)
          }
        }

        person.showInfo();
        => {age: 40, name: '아이유', showInfo: ƒ}
        => 40 '아이유'

        var showInfo = person.showInfo;
        showInfo();
        => Window

변수의 유효범위
1. 전역 유효 범위와 지역 유효범위
2. 변수의 충돌
3. 함수 안에서 변수 선언과 변수 끌어올림
4. 함수 안에서 변수 선언 생략
  
  var a = 10;
  delete window.a;
  => false

  a = 10;
  delete window.a;
  => true

5. 블록 유효 범위 : let과 const
  var - 유효범위 : 함수 지역 범위
  var 변수 선언자 있다 하더라도 동일한 변수를 정의면 기존 값이 변경
  ES6+ 버전에서 추가된것들
  - 유효범위 - {...}
  - 중복 정의 X
  let : 변수 선언자
  const : 상수 선언자

  변수 선언을 const로 하고 변경이 필요할때만 let사용  

  참고)
    문자, 숫자, 논리값, undefined제외 전부 객체

    예)
    const person = {
      age : 40,
      name : "아이유"
    };

    person.age = 50;

    person;

    person = 50; -> X

6. 함수 리터럴로 함수 정의하기
  var add = function(...){

  }

7. 객체의 메서드
  - 객체 안에 정의된 함수 객체 -> 메서드
  - 단축 표기법 가능

  예)
  const person = {
    age : 40,
    name : "아이유",
    showInfo(){
      console.log(this.age, this.name);
    }
  }
  person.showInfo();
  => 40 '아이유'
8. 매개변수로 함수
  - 용도가 특정 함수 안에서만 사용됨
  - 익명함수로 주로 사용

    예)
    const fruits = ["Apple","Orange","Mango"];

    fruits.forEach(function(fruit){
      console.log(fruit)
    });

    fruits.forEach(s => console.log(s));

  - ES6 -> 화살표 함수(짧게 사용하기 위해서)

    예)
    function add1(num1, num2){
      return num1 + num2;
    }
    add1(10,20)
    => 30

    const add2 = (num1, num2) => {
      return num1 + num2;
    }
    add2(10,20)
    => 30

    // return 은 생량이 가능하다
    const add2 = (num1, num2) => num1 + num2;
    add2(10,20)
    => 30    

9. 즉시 실행 함수
10. 가변길이 인수 목록(Arguments 객체)
11. 생성자

내장 객체
1. 