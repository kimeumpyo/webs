함수
1. 즉시 실행 함수
  - 함수를 정의하자마자 바로 실행

  ex)
  (function () {
    // 실행 코드
  })();

  ex)
  (function () {
    console.log("즉시 실행!");
  })();
      => 즉시 실행!

  ex)
  const result = (function (num1, num2) {
    return num1 + num2;
  })(10, 20);

  result;
  => 30



  - 매개변수 사용 가능
  - 반환값도 사용 가능

2. 가변길이 인수 목록(Arguments 객체)
  모든 함수에 arguments 지역변수가 존재
    - 입력한 모든 매개변수의 값
    참고) 
      자바스크립트에서 함수의 매개변수는 유동적이다
        - 갯수가 정확하지 않아도 오류 X

        ...연산자 : 전개 연산자

      ex)
      function add(num1, num2){
        console.log(num1, num2, arguments);
      }
      add(10);
      => 10 undefined

      add(10, 20, 30, 40);
      => 10 20 Arguments(4) [10, 20, 30, 40,]

      ex)
      function add(){
        let total = 0;
        for (let i = 0; i < arguments.length; i++){
          total += arguments[i];
        }

        return total;
      }

      add(10, 20, 30);

      ex) 가변
      function add(...nums){
        console.log(nums);
      }
      add(10);
      => [10]

      add(10, 20, 30, 40);
      => (4) [10, 20, 30, 40]

      ex) 
      function add(num0, ...nums){
        console.log(num0, nums);
        let total = 0;
        for (let i = 0; i <nums.length; i++){
          total += nums[i];
        }
        return total;
      }

      add(10, 20, 30, 40, 50);
      => 10 (4) [20, 30, 40, 50] // 10만 따로 빠져있다!

      ex) 전개 연산자
      const obj1 = {c : 3, d : 4};
      const obj2 = {e : 5, f : 6, ...obj1};

      obj2;
      => {e: 5, f: 6, c: 3, d: 4}

      ex) 전개 연산자
       const obj1 = {c : 3, d : 4};
       const obj2 = {...obj1};

       obj1 === obj2
       => false

      ex) 
      function add(num1, num2){
        num2 = num2 || 10;
        return num1 + num2;
      }
      add(20);
      => 30

      ex)
      function add(num1, num2 = 10){
        
        return num1 + num2;
      }
      add(20);
      => 30

3. 생성자
  참고)
    자바스크립트 함수 : 1급 객체
      1) 함수는 객체 - 함수는 값으로 사용 가능
        - 매개변수, 변환값
      2) 다른 객체를 만들어주는 객체 - 생성자 함수 객체

  자바스크립트의 상속
  [[Prototype]] : 프로토타입 체인 : 상속 관계
  __proto__ : Object.setPrototype(....)

    참고)
      객체 참조 변수 instanceof 생성자 함수
      -> 생성자 함수의 prototype체인인지 확인

    function 키워드로 함수만 정의해도 Function.prototyupe 객체상속
    - 모든 함수는 Function.prototype의 메서드 속성을 접근 ex3)

    생성자 함수 -> new 함수명(): 새로운 객체 생성

    클래스 구문 ex12)
      - 본질은 자바의 클래스와 절대 같디 않다!
      - 클래스를 가장한 생성자 함수 객체!!

    ex1)
      const obj1 = {a : 1, b : 2};

      console.dir(obj1);
      => Objecta: 1b: 2[[Prototype]]: Object
    
    ex2)
      const obj1 = {a : 1, b : 2};
      const obj2 = {c : 3, d : 4};

      obj1.__proto__= obj2;
      => {c: 3, d: 4}c: 3d: 4[[Prototype]]: Object
      
      obj1;
      => {a: 1, b: 2}a: 1b: 2[[Prototype]]: Objectc: 3d: 4[[Prototype]]: Object

      obj1.c;
      => 3

      obj1.d;
      => 4

    ex3) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function

      function Person(){

      }
      console.dir(Person);

    ex4)
      function Person(){

      }
      const p1 = new Person();
      p1;

    ex5)
      function Person(){

      }
      const  p1 = {};

      p1;
      p1.__proto__ = Person.prototype;
      p1;
      => Person {}
  
    
    ex6)
      function Person(){
        this.name = "아이유";
        this.age = 31;
      }

      Person(); // window.Person(); window.name, window.age

      name;
      => '아이유'

      window;

    ex7)
      function Person(){
        this.name = "아이유";
        this.age = 31; // this는 호출되기전 바뀔수있다
      }

      const p1 = {};

      p1;
      => {}

      // Person.prototype을 프로토타입 체인 연결(상속)
      p1.__proto__ = Person.prototype;
      => {constructor: ƒ}

      // 생성자 함수를 호출할때  this의 범위를 p1으로 변경해서 객체 초기 값
      Person.prototype.constructor.apply(p1);
      
      p1;
      => Person {}

    ex8)
      function Person(name, age){
        this.name = name;
        this.age = age; 
      }

      const p1 = new Person("아이유", 31);
      const p2 = new Person("가이유", 32);

      p1;
      => Person {name: '아이유', age: 31} 
      p2;
      => Person {name: '가이유', age: 32}
    
    ex9)
      function Person(name, age){
        this.name = name;
        this.age = age;
        this.showInfo = function(){
          console.log(this.name, this.age);
        }
      }

      const p1 = new Person("아이유", 31);

      p1.showInfo();
      => 아이유 31

      const p2 = new Person("가이유", 32);
      p2.showInfo();
      => 가이유 32

      p1.showInfo ===  p2.showInfo;
      => false

    ex10)
    function Person(name, age){
        this.name = name;
        this.age = age;
    }
    Person.prototype.showInfo = function(){
      console.log(this.name, this.age)
    }

    const p1 = new Person("아이유", 31);
    const p2 = new Person("가이유", 32);

    p1.showInfo ===  p2.showInfo;
    => true

    ex11)
    const num1 = [1,2,3,4];

    const num2 = [4,5,6,7,8];

    num1.concat ==  num2.concat;
    => true

    ex11)
    function Person(name, age){
        this.name = name;
        this.age = age;
    }
    Person.prototype.showInfo = function(){
      console.log(this.name, this.age)
    }

    Person.printInfo = function(){
    console.log("print!!");
    };

    Person.printInfo();
    => print!!

    ex12)
    class Person{
      constuctor(name, age){
        this.name = name;
        this.age = age;
      }
      showInfo(){
        console.log(this.name, this.age);
      }
      static printInfo(){
        console.log("print!")
      }
    }

    console.dir(Person);

    Person.printInfo();

    const p1 = new Person("아이유", 31);
    const p2 = new Person("야이유", 31);

내장 객체
1. 내장 생성자
2. 내장 객체

  - 네이티브 객체(ECMAScript - 표준객체)
    - 내장 생성자
      Object
        - 모든 객체는 Object.prototype의 객체를 상속
        - Object.prototype
            .toLocaleStrint() : 지역화를 고려한 문자 형식 출력
          Object.keys() : 객체의 속성명만 배열 객체로 반환
          Object.values() : 객체의 속성값만 배열 객체로 반환

        String : Wrapper 생성자 객체 
          기본형 문자를 변수에 담고, 매서드 호출시 자동으로 String 생성자 객체 생성자
          - indexOf : 문자열의 위치(0부터 시작) ex4)
            문자열이 X -> -1 반환
            왼쪽 -> 오른쪽

          - lastIndexOf : 문자열 위치(0부터 시작)  ex5)
            문자열 X -> -1 반환
            오른쪽 -> 왼쪽

          - split("패턴") : 문자열 쪼개기 배열 객체 ex6)
            - 반대 : 배열 객체 -> 특정 문자열로 결함
              -> 문자열 Array.prototype.join(..)
        
        ex1) 
        const num1 = 10000
        
        const num2 = num1.toLocaleString();

        num2;
        => '10,000'

        ex2)
        const obj1 = {a:1, b:2, c:3, d:4};
        const keys = Object.keys(obj1);

        keys;
        =>(4) ['a', 'b', 'c', 'd']

        const values = Object.values(obj1);

        values;
        => (4) [1, 2, 3, 4]

        ex3) concat(문자열 합치기)
        const str1 = "abc";

        const str2 = str1.concat("def", "ghi"); // new String(str1) -> 결과 -> str1

        str2;
        => 'abcdefghi'

        ex4) indexOf (특정 문자 위치 찾기)
        const fruits = "Apple, Orange, Mango, Melon, Apple";

        fruits.indexOf("Apple");
        => 0

        fruits.indexOf("Orange");
        => 6

        ex5) lastIndexOf 
        const fruits = "Apple, Orange, Mango, Melon, Apple";
        fruits.lastIndexOf("Apple");
        => 29

        ex6) split (문자열을 배열로 변환)
        const fruits = "Apple, Orange, Mango, Melon, Apple";
        const fruits2 = fruits.split(", ");
        fruits2;
        =>(5) ['Apple', 'Orange', 'Mango', 'Melon', 'Apple']

        ex7) trim(공백 지우기)
        const a = '    abc      ';
        const b = a.trim();
        a;
        =>'    abc      '

        b;
        =>'abc'

        const c = a.trimEnd();
        c;
        =>'    abc'

      Number : Wrapper 생성자 객체 
        Number 함수를 그대로 사용하는 경우
        long, double
        isNaN() / window.isNaN()
          NaN - Not a Number
            - 숫자가 아니면 true, 숫자이면  false
            
            - Number 함수에 값을 넣어서 호출 했을때 NaN이 반환되면 true, 아니면 false

            예) Number("10000")
        ParseFloat() / window.parseFloat()
          문자, 정수 -> 실수
        
        ParseInt() / window.parseInt()
          문자, 실수 -> 정수

        prototype
          .toFixed(소수점 자리수): 소수를 지정된 자리수 만큼 짤라서 문자열로 변환
          .toLocaleString()
        
        Boolean ex5)
          - 생성자 함수 객체이나 함수 형태로 사용을 많이 한다
          - 값을 평가 -> false, true 변환 
            false로 인식하는 값
              0, ", nudefined, null

            true로 인식하는 값
              false로 인식하는 값 이외의 값

        Array
          - 배열은 데이터군을 다루기위한 생성자 함수 객체
            (여러 데이터)

          - 자바의 배열과는 전혀 다른 형태
            - 같은 자료형으로 되어 있는 여러 변수가 물리적으로 나열된 구조
            - int[]nums = num int[4]; // 4개의 int 변수가 선언
          
          - 다른 언어의 배열을 유사하게 구현한 배열 객체
          - new Array() ex6)
            -> 매개변수 갯수 1개 숫자 
              - 배열 객체 공간의 갯수
                (음수 X)

            -> 매개변수 갯수 2개 이상, 문자, 숫자  ex8)
              - 데이터 갯수만큼 배열 객체 공간생성, 데이터가 각 위치별로 위치
              - [값1, 값2, 값3]
                -> new Array(값1, 값2, 값3...)
              - [속성명 - 숫자]

              - 배열 객체의 요소 추가 ex10)
                .push(...items) : 끝에 추가
                .unshift(...items) : 앞에 추가

              - 배열 객체의 요소 삭제 ex10)
                .pop() : 끝에 있는 요소 1개 삭제
                .shift() : 앞에 있는 요소 1개 삭제

              - 중간에 제거, 추가 ex11) 
                .splice

              - Symbol.iterator  ex13)
                .next() : 다음 요소를 순서대로 가져오는 메서드

                  for ... of 구문

              Date ex17)
                - 객체 생성 : 현재 시점의 날짜와 시간 객체

                참고) 
                  java.util.Date JDK1.0
                    java.util.Calendar JDK1.1

                  java.time 패키지 JDK8
                  (Date/Time API)

              Error : 에러 생성자 객체
                try ~ catch

        ex1)
        const num1 = "1000";
        typeof num1;
        => 'string'

        isNaN(num1);
        => false;

        ex2)
        const num1 = "10000";
        const num2 = Number(num1);

        num2;
        => 10000

        typeof num2;
        => 'number'

        Number("ABC");
        => NaN

        isNaN("100000");
        => false

        isNaN("ABC")
        => true

        typeof num1;
        => 'string'

        typeof num1 == 'number'
        => false

        ex3)
        const num1 = "10000"

        parseInt(num1) + 100;
        => 10100

        Number(num1) + 100;
        => 10100

        const num2 = "100.123";

        parseFloat(num2) + 100;
        => 200.123
 
        Number(num2) + 100;
        => 200.123

        ParseInt(num2);
        => 100

        ex4)
        const num = 10000.123456;

        num.toFixed(2);
        => '10000.12'

        num.toLocaleString();
        => '10,000.123'

        ex5)
        Boolean(0);
        => false
        Boolean(null);
        => false
        Boolean(1);
        => true
        Boolean("   ");
         => true

        ex6)
        const nums = new Array(1, 2);

        nums;
        => (2) [1, 2]

        const fruits = new Array("Apple", "Orange", "Melon");
        fruits;
        => (3) ['Apple', 'Orange', 'Melon']

        ex7)
        const fruits = ["Apple", "Orange", "Melon"];
        fruits;
        => (3) ['Apple', 'Orange', 'Melon'] // Array.prototype 상속 받음

        ex8)
        const fruits1 = ["Apple", "Orange", "Melon"];
        const fruits2 = ["Apple", "Orange", "Melon"];

        fruits1 === fruits2
        => false

        fruits1.concat === fruits2.concat
        => true

        ex9)
        const fruits = ["Apple", "Orange", "Melon"];
        
        fruits[1] = "(수정)"

        fruits;
        => (3) ['Apple', '(수정)', 'Melon']
        
        fruits[10] = "Mango"
        fruits;
        => (11) ['Apple', '(수정)', 'Melon', empty × 7, 'Mango']

        ex10)
        const fruits = ["Apple", "Orange", "Melon"];
        fruits.push("Banana", "Mango");

        fruits;
        => (5) ['Apple', 'Orange', 'Melon', 'Banana', 'Mango']

        fruits.unshift("Banana", "Mango");
        fruits;
        => (7) ['Banana', 'Mango', 'Apple', 'Orange', 'Melon', 'Banana', 'Mango']

        fruits.pop();
        fruits;
        => (6) ['Banana', 'Mango', 'Apple', 'Orange', 'Melon', 'Banana']

        fruits.shift();
        fruits; 
        => (5) ['Mango', 'Apple', 'Orange', 'Melon', 'Banana']

        ex11) 
        const fruits = ["Apple", "Orange", "Melon", "Banana", "Melon"];

        fruits.splice(1, 2);
        => (2) ['Orange', 'Melon']

        fruits;
        => (3) ['Apple', 'Banana', 'Melon']

        ex12) 
        const fruits = ["Apple", "Orange", "Melon", "Banana", "Melon"];

        fruits.splice(1, 2, "aaa", "bbb");
        => (2) ['Orange', 'Melon']

        fruits;
        => (5) ['Apple', 'aaa', 'bbb', 'Banana', 'Melon']

        ex13)
        const fruits = ["Apple", "Orange", "Melon", "Banana", "Melon"];
        const iter = fruits[Symbol.iterator]();
        iter.next();
        => {value: 'Apple', done: false}
        iter.next();
        => {value: 'Orange', done: false}
        iter.next();
        => {value: 'Melon', done: false}

        while(true){
          const value = iter.next();
          if(value.done){
            break;
          }
          const v = value.value;
          console.log(v);
        }

        ex14)
         const fruits = ["Apple", "Orange", "Melon", "Banana", "Melon"];

         for(const fruit of fruits){
          console.log(fruit);
         }

        ex15)
        const str = new String("ABC");
        console.dir(str);
        => String0: "A"1: "B"2: "C"length: 3[[Prototype]]: String[[PrimitiveValue]]: "ABC"

        ex16)
        const str  = "ABCDEFG"
        
        for(const ch of str){
          console.log(ch);
        }
        => 

        ex17)
        const date = new Date();
        date;
        => Sat Jun 24 2023 16:14:25 GMT+0900 (한국 표준시)

        const str = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`; 

        str;
        => '2023-5-24 16:17:55'

        ex18)
        const date = new Date();
        date.setDate(date.getDate() - 7); // 7일전
        date;
        => Sat Jun 17 2023 16:19:29 GMT+0900 (한국 표준시)

        ex19)
        let str;

        str.toUpperCase();
        => 에러문구

        try{
          str.toUpperCase();
        }catch(err){
          console.log(err);
          console.log("에러 처리!")
        }
        ex20)

        try{
          throw new Error("에러 발생!!!")
          consoel.log("실행코드!")
        }catch(err){
          alert(err.massage);
        }

        
    - 내장 객체
      JSON
        - javaScript Object Notation
        - 자바스크립트 객체 형식의 문자열

        JSON 문자열 -> 자바스크립트 객체 변환
          parse(JSON 문자열)

        자바스크립트 객체 -> JSON 문자열 변환
          stringify(자바스크립트 객체)
      
          ex1)
          const person = {
            name : "아이유", 
            age : 31
          };

          const jsonStr = JSON.stringify(person);

          jsonStr;
          =>'{"name":"아이유","age":31}'

          typeof jsonStr;
          =>'string'

          const person2 = JSON.parse(jsonStr);

          person2;
          => {name: '아이유', age: 31}

      Math 
        - 수학 관련 편의 기능 객체
        - abs() : 절대값, 음수 -> 양수
        - sign(...) : 부호, 음수 -1, 양수 1, 0
        - round(...) : 반올림
        - ceil(...) : 올림
        - floor(...) : 반올림

          ex1)
          Math.abs(-10);
          => 10

          Math.sign(-10);
          => -1

          Math.sign(10);
          => 1

          Math.round(10.5)
          => 11

          Math.ceil(10.2)
          => 11

          Math.floor(10.2) 
          => 10


  - 호스트 객체
    - 자바스크립트 실행환경에 특화되어 있는 객체
    - 웹브라우저 객체
      window
        - 창마다 다른 window 객체 존재
        - location : 브라우저의 주소창과 관련된 객체
          assign() : 주소 이동 - 방문 기록을 기록하는 주소 이동
            - 뒤로가기, 앞으로가기 버튼 활성화
            - location.href= "주소": 방문기록 기록

          replace() : 주소 이동 : 방문기록 기록하지 않는 주소 이동

          relaod() :  새로 고침
          
        - history : 브라우저의 방문 기록과 관련된 객체
          length : 방문 기록 갯수

          참고) shift + ctrl + n : 시크릿 모드 : 방문기록 X


        - screen : 
        - navigator :
        - document : 

      ex)
      검사 -> 네트워크 -> 새로고침 -> www.naver.com -> 응답
    - 1)서버 응답 -> HTML 문자열 전송 -> 브라우저 인식 X -> 브라우저가 인식할 수 있는 객체 형태로 변환 (document 객체로 변환)
    - 2) HTML 문자열 전송
    - 3) 브라우저 인식할 수 있는 객체 형태로 변환 (document 객체로 변환)-> 연산 시간이 소요
    - 4) HTML 텍스트 ->document 객체 변환 완료, document 객체를 트리구조로 편성(DOMTree) -> DOMContentLoaded 이벤트 발생
    - 5) 외부 자원등(CSS, JS, 이미지, 비디오 등등 )로드 완료 -> load 이벤트 발생

        DOM(Document Object Model)

    자바스크립트에서 특정 요소에 이벤트 부여 / 부여전에 요소를 찾아서 선택
      - 검색에 최적화된 구조 : 이진트리 구조

    - 컴포지트 패턴
      - UI에 특화된 패턴
      
    window.addEventListener("DOMContentLoaded", function(){

    })

    ES6+
      defer : DOMContentLoaded 이벤트 발생 이후에 실행
      async : 비동기


      
  


    

