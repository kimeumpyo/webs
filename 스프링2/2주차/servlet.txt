서블릿(Servlet)

1. 서블릿(Servlet)의 개요
  - 자바의 웹 기술

  참고)
    servlet 4 -> javaee 8
    servlet 5,6 -> jakartaee 9 ~ 10 : jakarta..

    spring5 - java 8
      spring webmvc - javaee8
      springboot 2.x
      tomcat 9


    spring6  - java 17
      spring webmvc - jakartaee 9
      springboot 3.x
      tomcat10

인텔리J 설치 (무료버전)
https://www.jetbrains.com/ko-kr/idea/download/?section=windows

tomcat10 설치
https://tomcat.apache.org/download-10.cgi
64-bit Windows zip (pgp, sha512) 버전

즐겨찾기
https://tomcat.apache.org/tomcat-10.0-doc/index.html
https://jakarta.ee/specifications/servlet/5.0/apidocs/


2. 서블릿(Servlet)클래스 작성하기
  jakarta.servlet-api

  - API(application Programming Interface) : 애플리케이션 개발 관련 설계 틀
    - 인터페이스, 추상 클래스

  - 실제 구현 클래스 : WAS(Web application Service)가 제공 - Tomcat10

  - mvnrepository -> https://mvnrepository.com/

  메이븐 명령어

    mvn archetype : generate - 메이븐 프로젝트 생성

    mvn complie -> 소스 컴파일

    mvn test : 단위 테스트, 통합 테스트

    mvn package : 배포시 -> target/....jar

    mvn clean : 컴파일된 파일 삭제(target 폴더가 삭제)

    - 배포파일 생성시 -> 기존 컴파일된 클래스 삭제 -> 배포파일 생성
     mvn clean package

     <scope>
      - complie : 기본값 -> 컴파일시, 실행, 배포시에 포함되는 라이브러리
      - runtime : 컴파일시 X, 실행 중에만 
      - provided : 개발시에는 필요, 배포시에는 필요 X
      - test : 테스트시에만 필요

  - 서블릿 클래스를 작성할 때 지켜야할 규칙
      1) HttpServlet 클래스를 상속

      2) 서블릿 클래스는 public으로 만들어야 합니다.
        - 웹 컨테이너가 서블릿 객체를 만들 때 이 접근 권한이 필요하기 때문입니다.

3. web.xml 파일에 서블릿( Servlet )등록하기
  - XML문법
  <?xml version="1.0" encoding="UTF-8"?> : XML 문서임을 선언

  <web-app>

    <servlet>
      <servlet-name>서블릿 이름(중복X)</servlet-name>
      <servlet-class>패키지명을 포함한 전체 클래스명</servlet-class>
    </servlet>

    <servlet-mapping>
      <servlet-name>서블릿 이름(중복X)</servlet-name>
      <url-pattern>요청주소</url-pattern>
    </servlet-mapping>

  </web-app>

  참고)
    map -> 검색

    요청 -> WAS(Tomcat10) -> web.xml -> 서블릿 클래스 -> 서블릿 객체 
    -> 요청 메서드(doGet) : 요청 객체, 응답 객체 
    -> 매개변수로 넘겨준다(HttpServletRequest의 구현 객체, HttpServletRequest 구현 객체)

    HttpServletRequest - 요청(브라우저)
      - 용청쪽의 정보(요청방식, 요청URL, 요청IP, 요청쪽 헤더 정보, 요청쪽 사용자 전송 데이터(파라미터)...)
      - 입력 스트림(InputStream)

    HttpServletResponse - 응답(서버)
      - 응답 헤더 설정(응답 바디 형식 - Content-Type, 브라우저에게 전달하는 행동 - Location, Refresh, Set-Cookie)
      - 출력 스트림(OutputStream - ServletOutputStream, PrintWriter)

  참고)
  https://jakarta.ee/specifications/servlet/5.0/apidocs/jakarta/servlet/http/httpservletrequest
  https://jakarta.ee/specifications/servlet/5.0/apidocs/jakarta/servlet/servletrequest
  https://jakarta.ee/specifications/servlet/5.0/apidocs/jakarta/servlet/http/httpservletresponse
  https://jakarta.ee/specifications/servlet/5.0/apidocs/jakarta/servlet/servletresponse


4. 웹 브라우저로부터 데이터 입력 받기

  HttpServletRequest
    String getParameter("이름");

  참고)
    Servlet3 -> @WebServlet("URL");

    JSP(Java Server Page) : 서블릿 클래스로 웹페이지 만들때 복잡하다.
                            쉬운 JSP 문법으로 작성 -> WAS -> 번역(서블릿 클래스) -> 컴파일 -> 실행
    
    form.jsp -> WAS
              -> 번역 -> form_jsp.java(서블릿 클래스)
                      -> 컴파일
                      -> 실행

