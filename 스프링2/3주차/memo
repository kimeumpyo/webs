스프링 -> 객체관리!
스프링 프레임워크
spring-context

스프링은 객체 컨테이너
IoC(Inversion Of Control) : 제어의 역전 

제어 : 개발자가 해야 되는 객체 관리
역전 : 개발자가 해야 되는 객체 관리 스프링 컨테이너가 대신 수행

  1. BeanFactory
  2. ApplicationContext
  3. 싱글톤(SingleTon)객체

스프링DI(Dependency Injection - 의존주입)
  1. 의존이란?
    - 변경에 따른 영향이 전파되는 관계

    참고)
      전략패턴
        - 변경에 영향을 받는 부분은 닫는다(캡슐화)
        - 확장에는 열린 구조 : 통제 가능한 수단 제공
        - 디자인패턴의 가장 기본적인 패턴

    기능 service
      DAO(Data Access Object)
      DTO(Data Transfer Object)

  2. DI를 통한 의존 처리
  3. DI와 의존 객체 변경의 유연함
  4. 객체 조립기

  ------------------------------------

  스프링 DI 설정 및 사용

  2. @Conifguration
    - 스프링 컨테이너가 관리할 객체에 대한 설정 클래스임을 알려주는 애노테이션

  3. @Bean
    - 스프링 컨테이너에서 관리할 


  4. 두개 이상의 설정 파일 사용하기

    1) 스프링 컨테이너 생성자 매개변수
      - 가변적인 매개변수 -> 성정 클래스 클래스를 콤마(, ) 로 구분해서
        여러 설정
        AppCtx.class,AppCtx3.class...

    2) @Import
        @Import(...)

  참고)
    인텔리J -> 소스보기(CTRL + 마우스 왼쪽 키)

  5.의존 자동 주입
    1) @Autowired
      - 멤버 변수
      - setter 메서드의 매개변수
      - Optional 클래스로 정의된 멤버 변수

      - 기본 생성자가 없는 경우, 생성자 매개변수로 정의 (@Autowired를 사용 X, 컴포넌트 자동 스캔 O)

        참고)
          class Optional<T>{
            ...
            private final T value;
            ...
          }

    2) 일치하는 빈이 없는 경우

    3) @Qulifier
      -> 빈이 중복 될 경우, 자동 주입될 빈을 명시

  6. 빈 이름과 기본 한정자

  7. @Autowired 애노테니션의 필수 여부
    - 의존성을 주입할 객체가 스프링 컨테이너에 존재 X -> 오류
      (requried : true가 기본 설정)

    - 의존이 없어도 되는 경우 
      requried = false : 의존성이 없으면 setter 메서드를 호출
      
  8. 컴포넌트 스캔
    1) @Component
    2) @ComponentScan
    3) 기본스캔 대상
    4) 컴포넌트 스캔에 따른 충돌 처리
      - ExcludeFilters
    5) 빈 이름 충돌
    6) 수동 등록한 빈과 충돌
