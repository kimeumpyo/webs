데이터베이스 연동
1. JDBC API
  JDBC (Java DataBase Connectivity) API(Application Programming Interface)

	java.sql 패키지

	mysql driver 의존성에 추가
	-> jar -> 실행중 클래스파일 로드(데이터 영역 메모리)
	- 동적 클래스 로딩
		1) Class.forName(....)
		2) COnnection 객체 생성
			DriverManager
				.getConnection(String url)

			COnnection

				https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/Connection.html
				Statement
					- ResultSet executeQuery(String sql); : 결과를 조회하는 쿼리 -  SELECT
						- 반환값 : ResultSet - 결과를 조회할 수 있는 객체 반환

					- int executeUpdate(String sql); : 데이터의 변경과 관련된 쿼리 - INSERT, UPDATE, DELETE
						- 반환값 : 반영된 레코드 갯수

				PreparedStatement
					ResultSet executeQuery();
					int executeUpdate() 

				CallableStatement


	jdbcTemplate
		- 예외를 RuntimeException 하위클래스로 변환 : 따로 예외처리를 하지 않아도 문제 X
		- DB 연결, 자원 해제 -> 자동화

1. 설정하기
	1) spring-context + lombok
	2) spring-jdbc
	3) tomcat-jdbc : 커넥션 풀 기능 제공
		연결 객체 저장소 
	4) mysql connector

2. DataSource 설정

3. Tomcat JDBC의 주요 프로퍼티

4. jdbcTemplate을 이용한 쿼리 실행
	1) List <T> query(..) : SELECT 결과를 List 목록으로 추출
			T queryForObject(...) : SELCET 결과를 한개만 추출

	2) int update(..) : INSERT, UPDATE, DELETE 쿼리 / 반환값은 반영된 레코드 갯수
		modles
			BookDao
			Book

5. PreparedStatementCreator를 이용한 쿼리 실행
6. INSERT 쿼리 실행시 KeyHolder를 이용해서 자동 생성 키값 구하기
7. 트랜잭션 처리

로거
slf4j-api
logback-classis // 구현체

로그 레벨

FATAL
ERROR : 코드에 문제발생!
WARN : 경고

INFO
DEBUG
TRACE
