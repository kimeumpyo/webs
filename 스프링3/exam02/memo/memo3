타임리프(Thymeleaf)
1. 설정
    thymeleaf - spring6
    thymeleaf - java8time
    thymeleaf layout
    
2. 특징
    - Natural Template
    - 원래 HTML과 서버사이드 렌더링 결과 거의 동일하게 보이는 효과

타임리프 기본문법
1. 타임리프의 주요 식(expression)
    1) 변수식
        ${...}
        - 변수
        - 간단한 연산
        - 메서드 호출 가능

    2) 메세지식
        #{메세지 코드}
        - 공통 문구 / 교체, 변경시 편의
        - 메세지 파일명_언어코드.properties : 다국어 사이트 제작시 편의

        MessageSource 빈 생성, 성정

        참고)
            JSTL
            <fmt:setBundle basename="..."/>

            <fmt:message key=""/>

            properties 파일
            이름1 = 값
            이름2 = 값

            # 주석


    3) 링크식
        @{링크}
            1) 컨텍스트 경로 자동 추가
                (컨텍스트 경로는 유동적, HttpServletRequest / String getContextPath())

            2) 파라미터 추가
                @{/member/info(param1=value1, param2=value2)}
                    -> /exam02/member/info?param1=value1&param2=value2
            
            3) 경로 변수의 대체

        참고)
            JSTL
            <c:url.../>
    4) 선택 변수식
        th:object="${객체}"
            *{속성명}

        참고)
             th:block - 태그 노출 X, 선택 변수식, 문법 관련

2. 타임리프식 객체 : #...
    1) #strings
    2) #numbers
    3) #dates, #calendars, #temporals : - java.time 패키지
        - 형식화 

    4) #lists, #sets, #maps
        - 없는 기능을 만들때
        - 스프링 빈 이름으로 바로 접근
        ${@빈이름.메서드명(...)}

3. th:text
    - 텍스트 출력
    - 속성 x, 직접 값을 출력 [[${속성}]]
    - th:utext : HTML도 해석가능하게 출력

4. th:each : 반복문 - 배열, 콜렉션, 
    .index : 0부터 시작하는 반복 순서
    .count : 1부터 시작하는 반복 순서
    .first : 반복 첫번째
    .last : 반복 마지막
    .even : 짝수번째 반복인지
    .odd : 홀구번째 반복인지

5. th:if, th:unless : 조건문
    <...th:if="${...}">
        조건이 참일때 출력
    </...>

    <...th:unless="${...}">
        조건이 거짓일때 출력
    </...>

    - EL의 조건이 참일때 출력
    - true, false 상수는 그냥 문자 그대로 사용

6. th:swich
    - th:case

7. th:herf
8. th:Object
9. th:classappend="${...}"

스프링 MVC 폼과 에러 메시지 연동

1. #fields.errors(...)
2. #fileds.globalErrors(...)

타임리프 페이지 레이아웃
    th:replace: 템플릿 추가
    th:fragment : 템플릿 추가시 치환될 영역

    참고)
        WebMvcConfigurer 인터페이스
            : addResourceHandler()

    Ant 패턴

    **
        예) /member/** : member 경로의 하위 파일 또는 하위 경로를 포한한 모든 파일
    * 
        예) /member/* : member 경로 바로 하위 파일 또는 경로

    ? : 문자 1개
        예) /m?00
            -> /m100, /ma00, /m200

    컨트롤러 없이 URL과 템플릿을 연동
    WebMvcConfigurer
        void addViewControllers(...)

    참고)
        커스텀 태그
        <jsp: 
